package coverage.framework;

import io.smallrye.mutiny.Uni;
import io.smallrye.reactive.messaging.kafka.KafkaRecord;
import io.vertx.core.json.JsonObject;
import java.lang.Void;
import java.util.Optional;
import javax.inject.Inject;
import javax.ws.rs.NotFoundException;
import org.jboss.logging.Logger;

public class EventProcessingSuper {

  @Inject
  Logger log;
  // public <P extends EntitySuper, C extends EntitySuper> Uni<Void> processNewRelationship(
  //   KafkaRecord<JsonObject, JsonObject> msg,
  //   Uni<Optional<P>> parent,
  //   Uni<Optional<C>> child,
  //   AssignRelationFunction assign
  // ) {
  //   JsonObject payload = msg.getPayload();
  //   log.info("processNewRleationship ");
  //   switch (payload.getString("event")) {
  //     case "btcManager-assigned":
  //       return Uni
  //         .combine()
  //         .all()
  //         .unis(parent, child)
  //         .asTuple()
  //         .onItem()
  //         .transformToUni(
  //           tuple -> {
  //             log.info("Got parent and child items ");
  //             if (
  //               tuple.getItem1().isPresent() && tuple.getItem2().isPresent()
  //             ) {
  //               log.info("Both are present ");
  //               P p = tuple.getItem1().get();
  //               C c = tuple.getItem2().get();
  //               log.info("Calling the assign function ");
  //               return assign.relation(p, c.id.toString());
  //             } else {
  //               throw new NotFoundException();
  //             }
  //           }
  //         )
  //         .onItem()
  //         .transformToUni(
  //           item -> {
  //             log.info("Update complete acknowleding msg and returning ");
  //             return Uni.createFrom().completionStage(msg.ack());
  //           }
  //         )
  //         .onFailure()
  //         .recoverWithItem(
  //           err -> {
  //             // needs to go in dead letter queue
  //             msg.ack();
  //             return null;
  //           }
  //         );
  //     default:
  //       // need to put in dead letter queue - unknown event
  //       return Uni.createFrom().completionStage(msg.ack());
  //   }
  // }
}
